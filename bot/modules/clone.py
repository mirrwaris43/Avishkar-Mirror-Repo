import random
import string

from telegram.ext import CommandHandler
from telegram import ParseMode
from bot.helper.mirror_utils.upload_utils import gdriveTools
from bot.helper.telegram_helper.message_utils import *
from bot.helper.telegram_helper.filters import CustomFilters
from bot.helper.telegram_helper.bot_commands import BotCommands
from bot.helper.mirror_utils.status_utils.clone_status import CloneStatus
from bot import dispatcher, LOGGER, CLONE_LIMIT, STOP_DUPLICATE, LOGS_CHATS, download_dict, download_dict_lock, Interval
from bot.helper.ext_utils.bot_utils import get_readable_file_size, is_gdrive_link, is_gdtot_link, new_thread
from bot.helper.mirror_utils.download_utils.direct_link_generator import gdtot
from bot.helper.ext_utils.exceptions import DirectDownloadLinkException

@new_thread
def cloneNode(update, context):
    args = update.message.text.split(" ", maxsplit=1)
    reply_to = update.message.reply_to_message
    if len(args) > 1:
        link = args[1]
    elif reply_to is not None:
        link = reply_to.text
    else:
        link = ''
    gdtot_link = is_gdtot_link(link)
    if gdtot_link:
        try:
            msg = sendMessage(f"P Ä·¥è·¥Ñ·¥áss…™…¥…¢ Y·¥è·¥ú Ä ·¥ú Ä ü : <code>{link}</code>", context.bot, update)
            link = gdtot(link)
            deleteMessage(context.bot, msg)
        except DirectDownloadLinkException as e:
            deleteMessage(context.bot, msg)
            return sendMessage(str(e), context.bot, update)
    if is_gdrive_link(link):
        gd = gdriveTools.GoogleDriveHelper()
        res, size, name, files = gd.helper(link)
        if res != "":
            sendMessage(res, context.bot, update)
            return
        if STOP_DUPLICATE:
            LOGGER.info('C ú·¥á·¥Ñ·¥ã…™…¥…¢ F…™ ü·¥á / F·¥è ü·¥Ö·¥á Ä …™“ì ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥ D Ä…™·¥†·¥á...')
            smsg, button = gd.drive_list(name, True, True)
            if smsg:
                msg3 = "ü¶â F…™ ü·¥á/F·¥è ü·¥Ö·¥á Ä Is A ü Ä·¥á·¥Ä·¥Ö è A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á I…¥ D Ä…™·¥†·¥á. \nH·¥á Ä·¥á A Ä·¥á T ú·¥á A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á R·¥ás·¥ú ü·¥õs üëáüèºüëáüèΩ"
                sendMarkup(msg3, context.bot, update, button)
                if gdtot_link:
                    gd.deletefile(link)
                return
        if CLONE_LIMIT is not None:
            LOGGER.info('C ú·¥á·¥Ñ·¥ã…™…¥…¢ F…™ ü·¥á/F·¥è ü·¥Ö·¥á Ä S…™·¥¢·¥á..')
            if size > CLONE_LIMIT * 1024**3:
                msg2 = f'Failed, Clone limit is {CLONE_LIMIT}GB.\nYour File/Folder size is {get_readable_file_size(size)}.'
                sendMessage(msg2, context.bot, update)
                return
        if files <= 10:
            msg = sendMessage(f"üòæ C ü·¥è…¥…™…¥…¢ Y·¥è·¥ú Ä R·¥áœô·¥ú·¥ás·¥õ : <code>{link}</code>", context.bot, update)
            result, button = gd.clone(link)
            deleteMessage(context.bot, msg)
        else:
            drive = gdriveTools.GoogleDriveHelper(name)
            gid = ''.join(random.SystemRandom().choices(string.ascii_letters + string.digits, k=12))
            clone_status = CloneStatus(drive, size, update, gid)
            with download_dict_lock:
                download_dict[update.message.message_id] = clone_status
            sendStatusMessage(update, context.bot)
            result, button = drive.clone(link)
            with download_dict_lock:
                del download_dict[update.message.message_id]
                count = len(download_dict)
            try:
                if count == 0:
                    Interval[0].cancel()
                    del Interval[0]
                    delete_all_messages()
                else:
                    update_all_messages()
            except IndexError:
                pass
        if update.message.from_user.username:
            uname = f'@{update.message.from_user.username}'
        else:
            uname = f'<a href="tg://user?id={update.message.from_user.id}">{update.message.from_user.first_name}</a>'
        if uname is not None:
            cc = f'\n\n<b>C ü·¥è…¥·¥á·¥Ö B è : </b>{uname}'
            men = f'{uname} '
        if button in ["cancelled", ""]:
            sendMessage(men + result, context.bot, update)
        else:
            sendMarkup(result + cc, context.bot, update, button)
            if LOGS_CHATS:
                try:
                    for i in LOGS_CHATS:
                        msg1 = f'<b>F…™ ü·¥á C ü·¥è…¥·¥á·¥Ö : </b> <code>{name}</code>\n'
                        msg1 += f'<b>C ü·¥è…¥·¥á·¥Ö B è : </b>{uname}\n'
                        msg1 += f'<b>S…™·¥¢·¥á : </b>{get_readable_file_size(size)}\n'
                        bot.sendMessage(chat_id=i, text=msg1, reply_markup=button, parse_mode=ParseMode.HTML)
                except Exception as e:
                    LOGGER.warning(e)
        if gdtot_link:
            gd.deletefile(link)
    else:
        sendMessage('üëª H·¥á è, S·¥á…¥·¥Ö GD Ä…™·¥†·¥á ·¥è Ä GDT·¥èT  ü…™…¥·¥ã A ü·¥è…¥…¢ W…™·¥õ ú C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö O Ä B è R·¥á·¥ò ü è…™…¥…¢ T·¥è T ú·¥á L…™…¥·¥ã B è C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö C·¥è Ä Ä·¥á·¥Ñ·¥õ ü è ', context.bot, update)

clone_handler = CommandHandler(BotCommands.CloneCommand, cloneNode, filters=CustomFilters.authorized_chat | CustomFilters.authorized_user)
dispatcher.add_handler(clone_handler)
